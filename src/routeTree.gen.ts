/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkbenchRouteImport } from './routes/workbench'
import { Route as TheLabRouteImport } from './routes/the-lab'
import { Route as RedirectRouteImport } from './routes/redirect'
import { Route as OperationsRouteImport } from './routes/operations'
import { Route as DeferredRouteImport } from './routes/deferred'
import { Route as CalendarRouteImport } from './routes/calendar'
import { Route as BanxDatabaseRouteImport } from './routes/banx-database'
import { Route as PathlessLayoutRouteImport } from './routes/_pathlessLayout'
import { Route as UsersRouteRouteImport } from './routes/users.route'
import { Route as PostsRouteRouteImport } from './routes/posts.route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkbenchIndexRouteImport } from './routes/workbench.index'
import { Route as UsersIndexRouteImport } from './routes/users.index'
import { Route as PostsIndexRouteImport } from './routes/posts.index'
import { Route as WorkbenchPropertyEvaluatorRouteImport } from './routes/workbench.property-evaluator'
import { Route as WorkbenchPinterestOrganizerRouteImport } from './routes/workbench.pinterest-organizer'
import { Route as WorkbenchCsvComparatorRouteImport } from './routes/workbench.csv-comparator'
import { Route as WorkbenchAsciiArtRouteImport } from './routes/workbench.ascii-art'
import { Route as UsersUserIdRouteImport } from './routes/users.$userId'
import { Route as PostsPostIdRouteImport } from './routes/posts.$postId'
import { Route as PathlessLayoutNestedLayoutRouteImport } from './routes/_pathlessLayout/_nested-layout'
import { Route as PostsPostIdDeepRouteImport } from './routes/posts_.$postId.deep'
import { Route as PathlessLayoutNestedLayoutRouteBRouteImport } from './routes/_pathlessLayout/_nested-layout/route-b'
import { Route as PathlessLayoutNestedLayoutRouteARouteImport } from './routes/_pathlessLayout/_nested-layout/route-a'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api.users'
import { ServerRoute as ApiUsersIdServerRouteImport } from './routes/api/users.$id'

const rootServerRouteImport = createServerRootRoute()

const WorkbenchRoute = WorkbenchRouteImport.update({
  id: '/workbench',
  path: '/workbench',
  getParentRoute: () => rootRouteImport,
} as any)
const TheLabRoute = TheLabRouteImport.update({
  id: '/the-lab',
  path: '/the-lab',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectRoute = RedirectRouteImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const OperationsRoute = OperationsRouteImport.update({
  id: '/operations',
  path: '/operations',
  getParentRoute: () => rootRouteImport,
} as any)
const DeferredRoute = DeferredRouteImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRouteImport,
} as any)
const CalendarRoute = CalendarRouteImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRouteImport,
} as any)
const BanxDatabaseRoute = BanxDatabaseRouteImport.update({
  id: '/banx-database',
  path: '/banx-database',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutRoute = PathlessLayoutRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersRouteRoute = UsersRouteRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsRouteRoute = PostsRouteRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkbenchIndexRoute = WorkbenchIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WorkbenchRoute,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRouteRoute,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRouteRoute,
} as any)
const WorkbenchPropertyEvaluatorRoute =
  WorkbenchPropertyEvaluatorRouteImport.update({
    id: '/property-evaluator',
    path: '/property-evaluator',
    getParentRoute: () => WorkbenchRoute,
  } as any)
const WorkbenchPinterestOrganizerRoute =
  WorkbenchPinterestOrganizerRouteImport.update({
    id: '/pinterest-organizer',
    path: '/pinterest-organizer',
    getParentRoute: () => WorkbenchRoute,
  } as any)
const WorkbenchCsvComparatorRoute = WorkbenchCsvComparatorRouteImport.update({
  id: '/csv-comparator',
  path: '/csv-comparator',
  getParentRoute: () => WorkbenchRoute,
} as any)
const WorkbenchAsciiArtRoute = WorkbenchAsciiArtRouteImport.update({
  id: '/ascii-art',
  path: '/ascii-art',
  getParentRoute: () => WorkbenchRoute,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UsersRouteRoute,
} as any)
const PostsPostIdRoute = PostsPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRouteRoute,
} as any)
const PathlessLayoutNestedLayoutRoute =
  PathlessLayoutNestedLayoutRouteImport.update({
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRoute,
  } as any)
const PostsPostIdDeepRoute = PostsPostIdDeepRouteImport.update({
  id: '/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutNestedLayoutRouteBRoute =
  PathlessLayoutNestedLayoutRouteBRouteImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)
const PathlessLayoutNestedLayoutRouteARoute =
  PathlessLayoutNestedLayoutRouteARouteImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersIdServerRoute = ApiUsersIdServerRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ApiUsersServerRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/banx-database': typeof BanxDatabaseRoute
  '/calendar': typeof CalendarRoute
  '/deferred': typeof DeferredRoute
  '/operations': typeof OperationsRoute
  '/redirect': typeof RedirectRoute
  '/the-lab': typeof TheLabRoute
  '/workbench': typeof WorkbenchRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/workbench/ascii-art': typeof WorkbenchAsciiArtRoute
  '/workbench/csv-comparator': typeof WorkbenchCsvComparatorRoute
  '/workbench/pinterest-organizer': typeof WorkbenchPinterestOrganizerRoute
  '/workbench/property-evaluator': typeof WorkbenchPropertyEvaluatorRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/workbench/': typeof WorkbenchIndexRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/banx-database': typeof BanxDatabaseRoute
  '/calendar': typeof CalendarRoute
  '/deferred': typeof DeferredRoute
  '/operations': typeof OperationsRoute
  '/redirect': typeof RedirectRoute
  '/the-lab': typeof TheLabRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/workbench/ascii-art': typeof WorkbenchAsciiArtRoute
  '/workbench/csv-comparator': typeof WorkbenchCsvComparatorRoute
  '/workbench/pinterest-organizer': typeof WorkbenchPinterestOrganizerRoute
  '/workbench/property-evaluator': typeof WorkbenchPropertyEvaluatorRoute
  '/posts': typeof PostsIndexRoute
  '/users': typeof UsersIndexRoute
  '/workbench': typeof WorkbenchIndexRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/banx-database': typeof BanxDatabaseRoute
  '/calendar': typeof CalendarRoute
  '/deferred': typeof DeferredRoute
  '/operations': typeof OperationsRoute
  '/redirect': typeof RedirectRoute
  '/the-lab': typeof TheLabRoute
  '/workbench': typeof WorkbenchRouteWithChildren
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/workbench/ascii-art': typeof WorkbenchAsciiArtRoute
  '/workbench/csv-comparator': typeof WorkbenchCsvComparatorRoute
  '/workbench/pinterest-organizer': typeof WorkbenchPinterestOrganizerRoute
  '/workbench/property-evaluator': typeof WorkbenchPropertyEvaluatorRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/workbench/': typeof WorkbenchIndexRoute
  '/_pathlessLayout/_nested-layout/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/_pathlessLayout/_nested-layout/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts_/$postId/deep': typeof PostsPostIdDeepRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/posts'
    | '/users'
    | '/banx-database'
    | '/calendar'
    | '/deferred'
    | '/operations'
    | '/redirect'
    | '/the-lab'
    | '/workbench'
    | '/posts/$postId'
    | '/users/$userId'
    | '/workbench/ascii-art'
    | '/workbench/csv-comparator'
    | '/workbench/pinterest-organizer'
    | '/workbench/property-evaluator'
    | '/posts/'
    | '/users/'
    | '/workbench/'
    | '/route-a'
    | '/route-b'
    | '/posts/$postId/deep'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/banx-database'
    | '/calendar'
    | '/deferred'
    | '/operations'
    | '/redirect'
    | '/the-lab'
    | '/posts/$postId'
    | '/users/$userId'
    | '/workbench/ascii-art'
    | '/workbench/csv-comparator'
    | '/workbench/pinterest-organizer'
    | '/workbench/property-evaluator'
    | '/posts'
    | '/users'
    | '/workbench'
    | '/route-a'
    | '/route-b'
    | '/posts/$postId/deep'
  id:
    | '__root__'
    | '/'
    | '/posts'
    | '/users'
    | '/_pathlessLayout'
    | '/banx-database'
    | '/calendar'
    | '/deferred'
    | '/operations'
    | '/redirect'
    | '/the-lab'
    | '/workbench'
    | '/_pathlessLayout/_nested-layout'
    | '/posts/$postId'
    | '/users/$userId'
    | '/workbench/ascii-art'
    | '/workbench/csv-comparator'
    | '/workbench/pinterest-organizer'
    | '/workbench/property-evaluator'
    | '/posts/'
    | '/users/'
    | '/workbench/'
    | '/_pathlessLayout/_nested-layout/route-a'
    | '/_pathlessLayout/_nested-layout/route-b'
    | '/posts_/$postId/deep'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PostsRouteRoute: typeof PostsRouteRouteWithChildren
  UsersRouteRoute: typeof UsersRouteRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  BanxDatabaseRoute: typeof BanxDatabaseRoute
  CalendarRoute: typeof CalendarRoute
  DeferredRoute: typeof DeferredRoute
  OperationsRoute: typeof OperationsRoute
  RedirectRoute: typeof RedirectRoute
  TheLabRoute: typeof TheLabRoute
  WorkbenchRoute: typeof WorkbenchRouteWithChildren
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
}
export interface FileServerRoutesByFullPath {
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$id': typeof ApiUsersIdServerRoute
}
export interface FileServerRoutesByTo {
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$id': typeof ApiUsersIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$id': typeof ApiUsersIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/users' | '/api/users/$id'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/users' | '/api/users/$id'
  id: '__root__' | '/api/users' | '/api/users/$id'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiUsersServerRoute: typeof ApiUsersServerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/workbench': {
      id: '/workbench'
      path: '/workbench'
      fullPath: '/workbench'
      preLoaderRoute: typeof WorkbenchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/the-lab': {
      id: '/the-lab'
      path: '/the-lab'
      fullPath: '/the-lab'
      preLoaderRoute: typeof TheLabRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/operations': {
      id: '/operations'
      path: '/operations'
      fullPath: '/operations'
      preLoaderRoute: typeof OperationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/banx-database': {
      id: '/banx-database'
      path: '/banx-database'
      fullPath: '/banx-database'
      preLoaderRoute: typeof BanxDatabaseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workbench/': {
      id: '/workbench/'
      path: '/'
      fullPath: '/workbench/'
      preLoaderRoute: typeof WorkbenchIndexRouteImport
      parentRoute: typeof WorkbenchRoute
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof UsersRouteRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof PostsRouteRoute
    }
    '/workbench/property-evaluator': {
      id: '/workbench/property-evaluator'
      path: '/property-evaluator'
      fullPath: '/workbench/property-evaluator'
      preLoaderRoute: typeof WorkbenchPropertyEvaluatorRouteImport
      parentRoute: typeof WorkbenchRoute
    }
    '/workbench/pinterest-organizer': {
      id: '/workbench/pinterest-organizer'
      path: '/pinterest-organizer'
      fullPath: '/workbench/pinterest-organizer'
      preLoaderRoute: typeof WorkbenchPinterestOrganizerRouteImport
      parentRoute: typeof WorkbenchRoute
    }
    '/workbench/csv-comparator': {
      id: '/workbench/csv-comparator'
      path: '/csv-comparator'
      fullPath: '/workbench/csv-comparator'
      preLoaderRoute: typeof WorkbenchCsvComparatorRouteImport
      parentRoute: typeof WorkbenchRoute
    }
    '/workbench/ascii-art': {
      id: '/workbench/ascii-art'
      path: '/ascii-art'
      fullPath: '/workbench/ascii-art'
      preLoaderRoute: typeof WorkbenchAsciiArtRouteImport
      parentRoute: typeof WorkbenchRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof UsersRouteRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdRouteImport
      parentRoute: typeof PostsRouteRoute
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteImport
      parentRoute: typeof PathlessLayoutRoute
    }
    '/posts_/$postId/deep': {
      id: '/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout/_nested-layout/route-b': {
      id: '/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteBRouteImport
      parentRoute: typeof PathlessLayoutNestedLayoutRoute
    }
    '/_pathlessLayout/_nested-layout/route-a': {
      id: '/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteARouteImport
      parentRoute: typeof PathlessLayoutNestedLayoutRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users/$id': {
      id: '/api/users/$id'
      path: '/$id'
      fullPath: '/api/users/$id'
      preLoaderRoute: typeof ApiUsersIdServerRouteImport
      parentRoute: typeof ApiUsersServerRoute
    }
  }
}

interface PostsRouteRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteRouteChildren: PostsRouteRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteRouteWithChildren = PostsRouteRoute._addFileChildren(
  PostsRouteRouteChildren,
)

interface UsersRouteRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteRouteChildren: UsersRouteRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteRouteWithChildren = UsersRouteRoute._addFileChildren(
  UsersRouteRouteChildren,
)

interface PathlessLayoutNestedLayoutRouteChildren {
  PathlessLayoutNestedLayoutRouteARoute: typeof PathlessLayoutNestedLayoutRouteARoute
  PathlessLayoutNestedLayoutRouteBRoute: typeof PathlessLayoutNestedLayoutRouteBRoute
}

const PathlessLayoutNestedLayoutRouteChildren: PathlessLayoutNestedLayoutRouteChildren =
  {
    PathlessLayoutNestedLayoutRouteARoute:
      PathlessLayoutNestedLayoutRouteARoute,
    PathlessLayoutNestedLayoutRouteBRoute:
      PathlessLayoutNestedLayoutRouteBRoute,
  }

const PathlessLayoutNestedLayoutRouteWithChildren =
  PathlessLayoutNestedLayoutRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteChildren,
  )

interface PathlessLayoutRouteChildren {
  PathlessLayoutNestedLayoutRoute: typeof PathlessLayoutNestedLayoutRouteWithChildren
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutNestedLayoutRoute: PathlessLayoutNestedLayoutRouteWithChildren,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

interface WorkbenchRouteChildren {
  WorkbenchAsciiArtRoute: typeof WorkbenchAsciiArtRoute
  WorkbenchCsvComparatorRoute: typeof WorkbenchCsvComparatorRoute
  WorkbenchPinterestOrganizerRoute: typeof WorkbenchPinterestOrganizerRoute
  WorkbenchPropertyEvaluatorRoute: typeof WorkbenchPropertyEvaluatorRoute
  WorkbenchIndexRoute: typeof WorkbenchIndexRoute
}

const WorkbenchRouteChildren: WorkbenchRouteChildren = {
  WorkbenchAsciiArtRoute: WorkbenchAsciiArtRoute,
  WorkbenchCsvComparatorRoute: WorkbenchCsvComparatorRoute,
  WorkbenchPinterestOrganizerRoute: WorkbenchPinterestOrganizerRoute,
  WorkbenchPropertyEvaluatorRoute: WorkbenchPropertyEvaluatorRoute,
  WorkbenchIndexRoute: WorkbenchIndexRoute,
}

const WorkbenchRouteWithChildren = WorkbenchRoute._addFileChildren(
  WorkbenchRouteChildren,
)

interface ApiUsersServerRouteChildren {
  ApiUsersIdServerRoute: typeof ApiUsersIdServerRoute
}

const ApiUsersServerRouteChildren: ApiUsersServerRouteChildren = {
  ApiUsersIdServerRoute: ApiUsersIdServerRoute,
}

const ApiUsersServerRouteWithChildren = ApiUsersServerRoute._addFileChildren(
  ApiUsersServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostsRouteRoute: PostsRouteRouteWithChildren,
  UsersRouteRoute: UsersRouteRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  BanxDatabaseRoute: BanxDatabaseRoute,
  CalendarRoute: CalendarRoute,
  DeferredRoute: DeferredRoute,
  OperationsRoute: OperationsRoute,
  RedirectRoute: RedirectRoute,
  TheLabRoute: TheLabRoute,
  WorkbenchRoute: WorkbenchRouteWithChildren,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiUsersServerRoute: ApiUsersServerRouteWithChildren,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
